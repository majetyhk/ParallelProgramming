prediction<-(inpDataset[i,]$values+prediction)/2
return(prediction)
}
}
}
prediction <- (prediction + inpDataset[1,]$values)/2
return(prediction)
}
value<-getPrediction(instant1,sampledata)
value
getPrediction<-function(inpInstant,inpDataset){
tempModel<-lm(values~eventDate,inpDataset)
prediction <- predict(tempModel,data.frame(eventDate = ymd(inpInstant)))
instantDate <- ymd(inpInstant)
for(i in 1:length(inpDataset)){
if(instantDate>inpDataset[i,]$eventDate){
if(i<length(inpDataset)){
w1<-as.numeric(difftime(instantDate,inpDataset[i,]$eventDate,units = "secs"))
print(w1)
w2<-as.numeric(difftime(inpDataset[i+1,]$eventDate, instantDate,units = "secs"))
print(w2)
prediction<-(w1*inpDataset[i,]$values + w2*inpDataset[i+1,]$values)/(w1+w2)
print(prediction)
return(prediction)
}
else{
prediction<-(inpDataset[i,]$values+prediction)/2
return(prediction)
}
}
}
prediction <- (prediction + inpDataset[1,]$values)/2
return(prediction)
}
value<-getPrediction(instant1,sampledata)
newdata2<-sampledata[order(sampledata$eventDate),]
value<-getPrediction(instant1,newdata2)
value
getPrediction<-function(inpInstant,inpDataset){
tempModel<-lm(values~eventDate,inpDataset)
prediction <- predict(tempModel,data.frame(eventDate = ymd(inpInstant)))
instantDate <- ymd(inpInstant)
for(i in 1:length(inpDataset)){
if(instantDate<inpDataset[i,]$eventDate){
if(i>1){
w1<-as.numeric(difftime(instantDate,inpDataset[i-1,]$eventDate,units = "secs"))
print(w1)
w2<-as.numeric(difftime(inpDataset[i,]$eventDate, instantDate,units = "secs"))
print(w2)
prediction<-(w1*inpDataset[i-1,]$values + w2*inpDataset[i,]$values)/(w1+w2)
print(prediction)
return(prediction)
}
else{
prediction<-(inpDataset[i,]$values+prediction)/2
return(prediction)
}
}
}
prediction <- (prediction + inpDataset[length(inpDataset),]$values)/2
return(prediction)
}
value<-getPrediction(instant1,newdata2)
value
p5<-p2+geom_point(data = data.frame(eventDate = c(ymd(instant1)),values = c(value)),color = "blue")
p5
getPrediction<-function(inpInstant,inpDataset){
tempModel<-lm(values~eventDate,inpDataset)
prediction <- predict(tempModel,data.frame(eventDate = ymd(inpInstant)))
instantDate <- ymd(inpInstant)
for(i in 1:length(inpDataset)){
print(inpDataset[i,]$eventDate)
if(instantDate<inpDataset[i,]$eventDate){
if(i>1){
print("First If")
w1<-as.numeric(difftime(instantDate,inpDataset[i-1,]$eventDate,units = "secs"))
print(w1)
w2<-as.numeric(difftime(inpDataset[i,]$eventDate, instantDate,units = "secs"))
print(w2)
prediction<-(w1*inpDataset[i-1,]$values + w2*inpDataset[i,]$values)/(w1+w2)
print(prediction)
return(prediction)
}
else{
print("Else")
prediction<-(inpDataset[i,]$values+prediction)/2
return(prediction)
}
}
}
prediction <- (prediction + inpDataset[length(inpDataset),]$values)/2
return(prediction)
}
value<-getPrediction(instant1,newdata2)
newdata2
getPrediction<-function(inpInstant,inpDataset){
tempModel<-lm(values~eventDate,inpDataset)
prediction <- predict(tempModel,data.frame(eventDate = ymd(inpInstant)))
instantDate <- ymd(inpInstant)
for(i in 1:nrow(inpDataset)){
print(inpDataset[i,]$eventDate)
if(instantDate<inpDataset[i,]$eventDate){
if(i>1){
print("First If")
w1<-as.numeric(difftime(instantDate,inpDataset[i-1,]$eventDate,units = "secs"))
print(w1)
w2<-as.numeric(difftime(inpDataset[i,]$eventDate, instantDate,units = "secs"))
print(w2)
prediction<-(w1*inpDataset[i-1,]$values + w2*inpDataset[i,]$values)/(w1+w2)
print(prediction)
return(prediction)
}
else{
print("Else")
prediction<-(inpDataset[i,]$values+prediction)/2
return(prediction)
}
}
}
prediction <- (prediction + inpDataset[length(inpDataset),]$values)/2
return(prediction)
}
value<-getPrediction(instant1,newdata2)
getPrediction<-function(inpInstant,inpDataset){
tempModel<-lm(values~eventDate,inpDataset)
prediction <- predict(tempModel,data.frame(eventDate = ymd(inpInstant)))
instantDate <- ymd(inpInstant)
for(i in 1:nrow(inpDataset)){
print(inpDataset[i,]$eventDate)
if(instantDate<inpDataset[i,]$eventDate){
if(i>1){
print("First If")
w1<-as.numeric(difftime(instantDate,inpDataset[i-1,]$eventDate,units = "secs"))
print(w1)
w2<-as.numeric(difftime(inpDataset[i,]$eventDate, instantDate,units = "secs"))
print(w2)
prediction<-(w2*inpDataset[i-1,]$values + w1*inpDataset[i,]$values)/(w1+w2)
print(prediction)
return(prediction)
}
else{
print("Else")
prediction<-(inpDataset[i,]$values+prediction)/2
return(prediction)
}
}
}
prediction <- (prediction + inpDataset[length(inpDataset),]$values)/2
return(prediction)
}
value<-getPrediction(instant1,newdata2)
value
p5<-p2+geom_point(data = data.frame(eventDate = c(ymd(instant1)),values = c(value)),color = "blue")
p5
instant1<-"2010-05-20"
value<-getPrediction(instant1,newdata2)
value
p5<-p2+geom_point(data = data.frame(eventDate = c(ymd(instant1)),values = c(value)),color = "blue")
p5
newdata2
instant1<-"2010-03-1"
value<-getPrediction(instant1,newdata2)
value
p5<-p2+geom_point(data = data.frame(eventDate = c(ymd(instant1)),values = c(value)),color = "blue")
p5
instant1<-"2010-11-1"
value<-getPrediction(instant1,newdata2)
value
p5<-p2+geom_point(data = data.frame(eventDate = c(ymd(instant1)),values = c(value)),color = "blue")
p5
p6<-p2+geom_smooth(data = newdata2, method = "lm")
p6
p6<-p5+geom_smooth(data = newdata2, method = "lm")
p6
testSet<-c("2010-11-2","2010-1-20","2010-03-19","2010-05-4","2010-8-21","2010-12-30")
testSet<-c("2010-11-2","2010-1-20","2010-03-19","2010-05-4","2010-8-21","2010-12-30")
testFrame = data.frame(eventDate = ymd(testSet))
values<-sapply(testFrame$eventDate,getPrediction,inpDataset = newdata2)
testFrame$values<-values
p7<-p2+geom_point(data = testFrame,color = "green")
p8<-p7+geom_smooth(data = newdata2,method = "lm")
p8
test<-function(){
test2<-function(){
print("hi")
}
}
test()
test<-function(){
test2<-function(){
print("hi")
}
test2()
}
test()
ymd("2010-03-21 21:10")
ymd_hm("2010-03-21 21:10")
as.POSIXct("2010-03-21 21:10")
as.POSIXct("2010-01-01 21:10")
days<-sample(1:31,15,replace = T)
months  <-sample(1:12,15,replace = T)
year<-2010
randomDates<-paste(year,months,days,sep = "-")
randomDates
sampledata<-data.frame(eventDate = as.POSIXct(randomDates),values = values)
inputData<-data.frame(eventDate = as.POSIXct(knownTimestamps,format = "%Y-%m-%d %H:%M"),values = humidity)
getPrediction<-function(inpInstant,inpDataset){
tempModel<-lm(values~eventDate,inpDataset)
prediction <- predict(tempModel,data.frame(eventDate = as.POSIXct(inpInstant,format = "%Y-%m-%d %H:%M")))
instantDate <- as.POSIXct(inpInstant,format = "%Y-%m-%d %H:%M")
for(i in 1:nrow(inpDataset)){
print(inpDataset[i,]$eventDate)
if(instantDate<inpDataset[i,]$eventDate){
if(i>1){
print("First If")
w1<-as.numeric(difftime(instantDate,inpDataset[i-1,]$eventDate,units = "secs"))
print(w1)
w2<-as.numeric(difftime(inpDataset[i,]$eventDate, instantDate,units = "secs"))
print(w2)
prediction<-(w2*inpDataset[i-1,]$values + w1*inpDataset[i,]$values)/(w1+w2)
print(prediction)
return(prediction)
}
else{
print("Else")
prediction<-(inpDataset[i,]$values+prediction)/2
return(prediction)
}
}
}
prediction <- (prediction + inpDataset[length(inpDataset),]$values)/2
return(prediction)
}
testFrame = data.frame(eventDate = as.POSIXct(timestamps,format = "%Y-%m-%d %H:%M"))
values<-sapply(testFrame$eventDate,getPrediction,inpDataset = inputData)
values<-runif(15,1,100)
sampledata<-data.frame(eventDate = as.POSIXct(randomDates),values = values)
inputData<-data.frame(eventDate = as.POSIXct(sampledata,format = "%Y-%m-%d %H:%M"),values = humy)
hr<-1:15
hr<-paste(hr,"00",sep = ":")
randomDates<-paste(year,months,days,sep = "-")
randomDates<-paste(randomDates,hr,sep = " ")
values<-runif(15,1,100)
sampledata<-data.frame(eventDate = as.POSIXct(randomDates),values = values)
inputData<-data.frame(eventDate = as.POSIXct(sampledata,format = "%Y-%m-%d %H:%M"),values = humy)
k<-c()
for(i in 1:5){
k[i]<-i
}
k
ymd_hm("2010-03-21 21:10")
sampledata<-data.frame(eventDate = randomDates,values = values)
inputData<-data.frame(eventDate = as.POSIXct(sampledata,format = "%Y-%m-%d %H:%M"),values = humy)
inputData<-data.frame(eventDate = as.POSIXct(sampledata$eventDate,format = "%Y-%m-%d %H:%M"),values = values)
getPrediction<-function(inpInstant,inpDataset){
tempModel<-lm(values~eventDate,inpDataset)
prediction <- predict(tempModel,data.frame(eventDate = as.POSIXct(inpInstant,format = "%Y-%m-%d %H:%M")))
instantDate <- as.POSIXct(inpInstant,format = "%Y-%m-%d %H:%M")
for(i in 1:nrow(inpDataset)){
print(inpDataset[i,]$eventDate)
if(instantDate<inpDataset[i,]$eventDate){
if(i>1){
print("First If")
w1<-as.numeric(difftime(instantDate,inpDataset[i-1,]$eventDate,units = "secs"))
print(w1)
w2<-as.numeric(difftime(inpDataset[i,]$eventDate, instantDate,units = "secs"))
print(w2)
prediction<-(w2*inpDataset[i-1,]$values + w1*inpDataset[i,]$values)/(w1+w2)
print(prediction)
return(prediction)
}
else{
print("Else")
prediction<-(inpDataset[i,]$values+prediction)/2
return(prediction)
}
}
}
prediction <- (prediction + inpDataset[length(inpDataset),]$values)/2
return(prediction)
}
testSet<-c("2010-11-2 21:00","2010-1-20 20:00","2010-03-19 19:00")
testFrame = data.frame(eventDate = as.POSIXct(testSet,format = "%Y-%m-%d %H:%M"))
values<-sapply(testFrame$eventDate,getPrediction,inpDataset = inputData)
values
week("2010-01-10")
day("2010-01-10")
day("2010-01-10 21:00")
hour("2010-01-10 21:00")
a<-c(1,2,3,4)
a[2:4]
a[2:]
a[2,]
a[-1]
200-128
72/255
1.6*1.6*382
?data
data("iris")
irisData<-data(iris)
2^2
data("iris")
iris.rows<-nrows(iris)
iris.rows<-nrow(iris)
iris.cols<-ncol(iris)
iris.attrs<-colnames(iris)
iris.sw.vec<-iris[,"Sepal.Width"]
iris.sw.vec.subset<-iris.sw.vec[iris.sw.vec>=3&&iris.sw.vec<=4]
iris.sw.mean<-sum(iris.sw.vec)/iris.rows
iris.sw.stdDev<-sqrt(((iris.sw.vec-iris.sw.mean)^2)/(iris.rows-1))
iris.sw.stdDev<-sqrt(sum((iris.sw.vec-iris.sw.mean)^2)/(iris.rows-1))
sw.min<-min(iris.sw.vec)
sw.max<-max(iris.sw.vec)
iris.sw.mm.vec<-(iris.sw.vec-sw.min)/(sw.max - sw.min)
iris.sw.vec>=3&&iris.sw.vec<=4
iris.sw.vec>=3 & iris.sw.vec<=4
iris.sw.vec.subset<-iris.sw.vec[iris.sw.vec>=3&iris.sw.vec<=4]
iris.sw.mean<-sum(iris.sw.vec)/iris.rows
iris.sw.stdDev<-sqrt(sum((iris.sw.vec-iris.sw.mean)^2)/(iris.rows-1))
sw.min<-min(iris.sw.vec)
sw.max<-max(iris.sw.vec)
iris.sw.mm.vec<-(iris.sw.vec-sw.min)/(sw.max - sw.min)
iris.sw.zn.vec<-(iris.sw.vec-iris.sw.mean)/iris.sw.stdDev
plot(iris[,"Sepal.Width"],iris[,"Sepal.Length"],xlab = "Sepal Width", ylab = "Sepal Length", main = "Sepal Length vs Sepal Width")
iris.sw.mm.vec<-(iris.sw.vec-min(iris.sw.vec))/(max(iris.sw.vec) - min(iris.sw.vec))
cosine.similarity(c(1,1),c(1,2))
c(1,2)*c(1,2)
similarity <-function(vec1,vec2,method = "cosine"){
if(method="cosine"){
mag1<-sqrt(sum(vec1^2))
mag2<-sqrt(sum(vec2^2))
return<-sum(vec1*vec2)/(mag1*mag2)
}
}
similarity <-function(vec1,vec2,method = "cosine"){
if(method=="cosine"){
mag1<-sqrt(sum(vec1^2))
mag2<-sqrt(sum(vec2^2))
return<-sum(vec1*vec2)/(mag1*mag2)
}
}
similarity(c(1,1),c(1,2))
similarity <-function(vec1,vec2,method = "cosine"){
if(method=="cosine"){
mag1<-sqrt(sum(vec1^2))
mag2<-sqrt(sum(vec2^2))
return sum(vec1*vec2)/(mag1*mag2)
}
}
similarity <-function(vec1,vec2,method = "cosine"){
if(method=="cosine"){
mag1<-sqrt(sum(vec1^2))
mag2<-sqrt(sum(vec2^2))
return(sum(vec1*vec2)/(mag1*mag2))
}
}
similarity(c(1,1),c(1,2))
similarity(c(1,1),c(1,1))
similarity(c(1,1),c(1,0))
similarity(c(0,1),c(1,0))
queryVec<-c(0.5,0.1)
similarity(queryVec,c(0.5,0.5))
round(0.832023,3)
similarity <-function(vec1,vec2,method = "cosine"){
if(method=="cosine"){
mag1<-sqrt(sum(vec1^2))
mag2<-sqrt(sum(vec2^2))
return(sum(vec1*vec2)/(mag1*mag2))
}
else if(method = "euclidean"){
return(sqrt(sum((vec1-vec2)^2))
}
}
similarity <-function(vec1,vec2,method = "cosine"){
if(method=="cosine"){
mag1<-sqrt(sum(vec1^2))
mag2<-sqrt(sum(vec2^2))
return(sum(vec1*vec2)/(mag1*mag2))
}
else if(method = "euclidean"){
return(sqrt(sum((vec1-vec2)^2)))
}
}
similarity <-function(vec1,vec2,method = "cosine"){
if(method=="cosine"){
mag1<-sqrt(sum(vec1^2))
mag2<-sqrt(sum(vec2^2))
return(sum(vec1*vec2)/(mag1*mag2))
}
else if(method == "euclidean"){
return(sqrt(sum((vec1-vec2)^2)))
}
}
round(similarity(queryVec,c(0.5,0.5,"euclidean")),3)
round(similarity(queryVec,c(0.5,0.5),"euclidean"),3)
round(similarity(queryVec,c(0.5,0.1),"euclidean"),3)
round(similarity(queryVec,c(1,1),"euclidean"),3)
round(similarity(queryVec,c(1.5,1.1),"euclidean"),3)
round(similarity(queryVec,c(0.5,0.5),"euclidean"),3)
round(similarity(queryVec,c(0.7,0.4),"euclidean"),3)
round(similarity(queryVec,c(1,0.4),"euclidean"),3)
round(similarity(queryVec,c(-0.1,-0.2),"euclidean"),3)
round(similarity(queryVec,c(0.7,0.8),"euclidean"),3)
round(similarity(queryVec,c(0.7,0.8)),3)
round(similarity(queryVec,c(-0.1,-0.2)),3)
round(similarity(queryVec,c(1,0.4)),3)
round(similarity(queryVec,c(0.7,0.4)),3)
round(similarity(queryVec,c(0.5,0.5)),3)
exp(1)
exp(0)
exp(-1)
exp(c(0,1))
transform<-function(x1){
return (exp(x1)-exp(-x1))/(exp(x1)+exp(-x1))
}
c(2,4)/c(2,4)
c(2,4)/c(4,4)
round(similarity(transform(queryVec),transform(c(0.5,0.5))),3)
transform<-function(x1){
val<-(exp(x1)-exp(-x1))/(exp(x1)+exp(-x1))
print(val)
return(val)
}
transform<-function(x1){
val<-(exp(x1)-exp(-x1))/(exp(x1)+exp(-x1))
print(val)
return(val)
}
queryVec<-c(0.5,0.1)
round(similarity(transform(queryVec),transform(c(0.5,0.5))),3)
round(similarity(transform(queryVec),transform(c(0.5,0.5)),"euclidean"),3)
round(similarity(transform(queryVec),transform(c(0.7,0.4)),"euclidean"),3)
round(similarity(transform(queryVec),transform(c(1,0.4)),"euclidean"),3)
round(similarity(transform(queryVec),transform(c(-0.1,-0.2)),"euclidean"),3)
round(similarity(transform(queryVec),transform(c(0.7,0.8)),"euclidean"),3)
round(similarity(transform(queryVec),transform(c(0.7,0.8))),3)
round(similarity(transform(queryVec),transform(c(-0.1,-0.2))),3)
round(similarity(transform(queryVec),transform(c(1,0.4))),3)
round(similarity(transform(queryVec),transform(c(0.7,0.4))),3)
round(similarity(transform(queryVec),transform(c(0.5,0.5))),3)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("rgdal",dependencies = TRUE)
install.packages("rgdal",dependencies = TRUE)
install.packages("installr")
library(installr)
updateR()
install.packages("rgdal", dependencies =  TRUE)
getwd()
library(ggplot2)
data<-read.csv("./Datasets/1.csv")
data<-read.csv(".\Datasets\1.csv")
data<-read.csv("/Datasets/1.csv")
data<-read.csv("Datasets/1.csv")
?union
1000!
factorial(1000)
factorial(500)
factorial(50)
factorial(50)
factorial(69)
install.packages("astsa")
library(astsa)
inp<-jj
plot(inp)
plot(inp, type = 'o')
plot(globtemp,type = 'o')
plot(flu, type = 'o')
plot(star,type = 'o')
acf(inp)
acf.coeffs<-acf(inp)
acf.coeffs
setwd("C:\\Users\\Hari Krishna M\\Dropbox\\NCSU\\ParallelSystems\\Codes\\ParallelSystems\\HW1\\p2")
inp = read.csv("res.csv",header = TRUE)
colnames(inp)<-c("Pair","Size","AvgRTT","StdDev")
inp$Pair = factor(inp$Pair)
inp$Size = factor(inp$Size)
plots<- ggplot(inp,aes(x = Size,y = AvgRTT,fill = Pair)) + geom_bar(position = "dodge", stat = "identity") + geom_errorbar(aes(ymin = AvgRTT-StdDev, ymax = AvgRTT+StdDev ),width =0.8, position = "dodge") +geom_line(position = "dodge" )
plots
library(ggplot2)
setwd("C:\\Users\\Hari Krishna M\\Dropbox\\NCSU\\ParallelSystems\\Codes\\ParallelSystems\\HW1\\p2")
inp = read.csv("res.csv",header = TRUE)
colnames(inp)<-c("Pair","Size","AvgRTT","StdDev")
inp$Pair = factor(inp$Pair)
inp$Size = factor(inp$Size)
plots<- ggplot(inp,aes(x = Size,y = AvgRTT,fill = Pair)) + geom_bar(position = "dodge", stat = "identity") + geom_errorbar(aes(ymin = AvgRTT-StdDev, ymax = AvgRTT+StdDev ),width =0.8, position = "dodge") +geom_line(position = "dodge" )
plots
library(ggplot2)
setwd("C:\\Users\\Hari Krishna M\\Dropbox\\NCSU\\ParallelSystems\\Codes\\ParallelSystems\\HW1\\p2")
inp = read.csv("res.csv",header = TRUE)
colnames(inp)<-c("Pair","Size","AvgRTT","StdDev")
inp$Pair = factor(inp$Pair)
inp$Size = factor(inp$Size)
plots<- ggplot(inp,aes(x = Size,y = AvgRTT,fill = Pair), ylab = "Round trip time(milliseconds)", xlab = "Message size(bytes)") + geom_bar(position = "dodge", stat = "identity") + geom_errorbar(aes(ymin = AvgRTT-StdDev, ymax = AvgRTT+StdDev ),width =0.8, position = "dodge") +geom_line(position = "dodge" )
plots
inp = read.csv("res1.csv",header = TRUE)
colnames(inp)<-c("Pair","Size","AvgRTT","StdDev")
inp$Pair = factor(inp$Pair)
inp$Size = factor(inp$Size)
plots<- ggplot(inp,aes(x = Size,y = AvgRTT,fill = Pair), ylab = "Round trip time(milliseconds)", xlab = "Message size(bytes)") + geom_bar(position = "dodge", stat = "identity") + geom_errorbar(aes(ymin = AvgRTT-StdDev, ymax = AvgRTT+StdDev ),width =0.8, position = "dodge") +geom_line(position = "dodge" )
plots
inp = read.csv("res.csv",header = TRUE)
colnames(inp)<-c("Pair","Size","AvgRTT","StdDev")
inp$Pair = factor(inp$Pair)
inp$Size = factor(inp$Size)
plots<- ggplot(inp,aes(x = Size,y = AvgRTT,fill = Pair) ) + geom_bar(position = "dodge", stat = "identity") + geom_errorbar(aes(ymin = AvgRTT-StdDev, ymax = AvgRTT+StdDev ),width =0.8, position = "dodge") +geom_line(position = "dodge" ) + labs(y = "Round trip time(milliseconds)", x = "Message size(bytes)")
plots
inp = read.csv("res1.csv",header = TRUE)
colnames(inp)<-c("Pair","Size","AvgRTT","StdDev")
inp$Pair = factor(inp$Pair)
inp$Size = factor(inp$Size)
plots<- ggplot(inp,aes(x = Size,y = AvgRTT,fill = Pair) ) + geom_bar(position = "dodge", stat = "identity") + geom_errorbar(aes(ymin = AvgRTT-StdDev, ymax = AvgRTT+StdDev ),width =0.8, position = "dodge") +geom_line(position = "dodge" ) + labs(y = "Round trip time(milliseconds)", x = "Message size(bytes)")
plots
